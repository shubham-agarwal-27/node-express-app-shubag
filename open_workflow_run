#!/usr/bin/env node

const request = require('request');
const opn = require('open');
const { exec } = require('child_process');
const fs = require('fs');


/**
 * Change the color of text
 * @param  {String}	text 	The text to be colored
 * @param  {String} color 	The color number
 * @return {String}       	The colored text
 */
function textColor(text, color) { 
	return `\x1b[${color}m${text}\x1b[0m`; 
}
/**
 * Read the file contents
 * @param  {String}	file_name 	The name of the file to be read
 * @return {Promise}			The contents of the given file
 */
function getFileContent(file_name){
	return new Promise(resolve => {
		resolve(fs.readFileSync(file_name, "utf8").split("\n"));
	});
}
/**
 * Rewrite the file with some content
 * @param  {String}	file_name 	the name of the file to be rewritten
 * @param  {String} content		The content to be written
 * @return {Promise}			Resolves after the contents have been written
 */
async function rewriteFile(file_name, content){	
	return new Promise(resolve => {
		fs.writeFile(file_name, content, function(err){
			if(err){
				console.log(err);
				exit(1);
			}
			resolve();
		});
	});
}
/**
 * Get GitHub PAT and account details from user
 * @param  {String} file_name 			The name of the file to be used for input
 * @param  {String} original_content 	The content of the initial file that will be replace the file contents if something is messed up 
 * @return {Promise}					Resolves an object that stored the GitHub PAT and details of user
 */
async function getGitHubPAT(file_name, original_content){
	console.log();
	console.log("Please give your GitHub PAT Token in the file. \nOnce sure, save the file and proceed.");
	console.log();
	await opn(file_name, {wait: true});
	return new Promise(async (resolve) => {
		var user_inputs = await getFileContent('give_inputs.txt');
		var split_input = user_inputs[0].replace(/\s+/g, '').split(":");
		userDetails[split_input[0]] = split_input[1];
		resolve();
	});
}
/**
 * Get GitHub PAT and Tenant ID from user
 * @param  {String} file_name 			The name of the file to be used for input
 * @param  {String} original_content 	The content of the initial file that will be replace the file contents if something is messed up 
 * @return {Promise}					Resolves an object that stored the GitHub PAT and tenant ID of user
 */
async function getUserDetails(file_name, original_content){
	var userDetails = {}
	var file_content = await getFileContent(file_name);
	var split_input = file_content[0].replace(/\s+/g, '').split(":");
	if(split_input[1] === '' || split_input[1] === 'NA'){
		await getGitHubPAT(file_name, userDetails);
		var file_messed = await checkFileContentMessed(file_name);
		if(file_messed){
			await rewriteFile(file_name, original_content);
			console.log("You have messed up the file. Please re-run the command. Exitting...");
			process.exit(1);
		}
	}
	else
		userDetails[split_input[0]] = split_input[1];
	return new Promise(function(resolve){	  
		exec('git config --list', (error, stdout, stderr) => {
			var array_stdout = stdout.split("\n");
			for(var single_info of array_stdout){
				var info_splitted = single_info.split("=");
				if(info_splitted[0] === 'user.name'){
					userDetails['username'] = info_splitted[1];
				}

				if(info_splitted[0] === 'user.email'){
					userDetails['user_email'] = info_splitted[1];
				}

				if(info_splitted[0] === 'remote.origin.url'){
					userDetails['repo_name'] = info_splitted[1].split("https://github.com/")[1].split("/")[1].split(".")[0];
				}
			}

			resolve(userDetails);
		});
  	});
}
/**
 * Get all the workflows existing in repository
 * @param  {Object} userDetails     The object that stored user's information 
 * @return {Promise}				Resolves an array of all the workflow objects
 */
function getWorkflows(userDetails){
    var opts = {
        url: 'https://api.github.com/repos/'+userDetails['username']+'/'+userDetails['repo_name']+'/actions/workflows',
        headers: {
            'User-Agent': 'request',
            authorization: `Bearer ${userDetails['Github_PAT']}`
        }
    };

    return new Promise(function(resolve, reject) {
        request(opts, function(error, response, body){
            // console.log(JSON.parse(response['body'])['workflows']);
            resolve(JSON.parse(response['body'])['workflows']);
        });
    });
}
/**
 * Get the workflows created by us
 * @param  {Array} allWorkflowsInRepo       Array consisting of all the workflows in the repository
 * @return {Object}				            Workflow Object that was created by us
 */
function getMyWorkflow(allWorkflowsInRepo){
    var myWorkflow;
    for(var workflow of allWorkflowsInRepo){
        if(workflow['path'] === '.github/workflows/workflow.yml'){
            myWorkflow = workflow;
        }
    }
    return myWorkflow;
}
/**
 * Get URL of our workflow run
 * @param  {Object} userDetails     The object that stored user's information
 * @param  {Object} myWorkflow      Workflow Object that was created by us
 * @return {Promise}				Resolves the URL of our workflow run
 */
function getURLOfMyWorkflowRun(userDetails, myWorkflow){
    var opts = {
        url: 'https://api.github.com/repos/'+userDetails['username']+'/'+userDetails['repo_name']+'/actions/workflows/'+myWorkflow['id']+'/runs',
        headers: {
            'User-Agent': 'request',
            authorization: `Bearer ${userDetails['Github_PAT']}`
        }
    };

    return new Promise(function(resolve, reject) {
        request(opts, async function(error, response, body){
            // console.log(JSON.parse(response['body']));
            resolve(JSON.parse(response['body'])['workflow_runs'][0]['html_url']);
        });
    });
}


(async function(){
    original_content = await getFileContent('give_inputs.txt');
	original_content = original_content.join('\n');
    var userDetails = await getUserDetails('give_inputs.txt', original_content);
    var allWorkflowsInRepo = await getWorkflows(userDetails);
    var myWorkflow = getMyWorkflow(allWorkflowsInRepo);
    var urlOfMyWorkflowRun = await getURLOfMyWorkflowRun(userDetails, myWorkflow);
    console.log();
    console.log("**************************You can have a look at the workflow run using the below url:**************************");
    console.log();
    console.log(textColor(urlOfMyWorkflowRun, 95));
    console.log();
    console.log("Opening the link in browser...");
    setTimeout(function(){
        opn(urlOfMyWorkflowRun)},
        1500);
})();