#!/usr/bin/env node

const fs = require('fs');
const request = require('request');
const opn = require('opn');
const { exec } = require('child_process');

function getFileContent(file_name){
	return new Promise(resolve => {
		resolve(fs.readFileSync(file_name, "utf8").split("\n"));
	});
}

function getGitHubPAT(userDetails){
	return new Promise(resolve => {
		console.log();
		console.log("Please give your GitHub PAT Token in the file. \nOnce sure, end your token with a $$ to inform that you are done.");
		opn('give_inputs.txt');
		var current_line_number = 0;
		var i = setInterval(async function(){
			var user_inputs = await getFileContent('give_inputs.txt');
			if(current_line_number !== 0 || user_inputs == ''){
				clearInterval(i);
				resolve();
			}
			else{
				var split_input = user_inputs[current_line_number].replace(/\s+/g, '').split(":");
				if(!(split_input[1] === '' || split_input[1] === 'NA' || !(split_input[1].endsWith('$$')))){
					userDetails[split_input[0]] = split_input[1].split('$')[0];
					current_line_number++;
				}
			}
		}, 3000);
	});
}

async function getUserDetails(userDetails){
	var file_content = await getFileContent('give_inputs.txt');
	var split_input = file_content[0].replace(/\s+/g, '').split(":");
	if(!split_input[1].endsWith('$$'))
		await getGitHubPAT(userDetails);
	else
		userDetails[split_input[0]] = split_input[1].split('$')[0];
	console.log("Your github Pat token is : " + userDetails['Github_PAT'].slice(0, 4) + '.......');
  	return new Promise(function(resolve){
		exec('git config --list', (error, stdout, stderr) => {
			var array_stdout = stdout.split("\n");
			for(var single_info of array_stdout){
				var info_splitted = single_info.split("=");
				if(info_splitted[0] === 'user.name'){
					userDetails['username'] = info_splitted[1];
				}

				if(info_splitted[0] === 'user.email'){
					userDetails['user_email'] = info_splitted[1];
				}

				if(info_splitted[0] === 'remote.origin.url'){
					userDetails['repo_name'] = info_splitted[1].split("https://github.com/")[1].split("/")[1].split(".")[0];
				}
			}

			resolve();
		});
  	});
}

function getWorkflows(userDetails){
    var opts = {
        url: 'https://api.github.com/repos/'+userDetails['username']+'/'+userDetails['repo_name']+'/actions/workflows',
        headers: {
            'User-Agent': 'request'
        }
    };

    return new Promise(function(resolve, reject) {
        request(opts, async function(error, response, body){
            // console.log(JSON.parse(response['body'])['workflows']);
            resolve(JSON.parse(response['body'])['workflows']);
        });
    });
}

function getMyWorkflow(allWorkflowsInRepo){
    var myWorkflow;
    for(var workflow of allWorkflowsInRepo){
        if(workflow['name'] === '.github/workflows/workflow.yml'){
            myWorkflow = workflow;
        }
    }
    return myWorkflow;
}

function getURLOfMyWorkflowRun(userDetails, myWorkflow){
    var opts = {
        url: 'https://api.github.com/repos/'+userDetails['username']+'/'+userDetails['repo_name']+'/actions/workflows/'+myWorkflow['id']+'/runs',
        headers: {
            'User-Agent': 'request'
        }
    };

    return new Promise(function(resolve, reject) {
        request(opts, async function(error, response, body){
            // console.log(JSON.parse(response['body']));
            resolve(JSON.parse(response['body'])['workflow_runs'][0]['html_url']);
        });
    });
}

(async function(){
    var userDetails = {};
    await getUserDetails(userDetails);
    var allWorkflowsInRepo = await getWorkflows(userDetails);
    var myWorkflow = getMyWorkflow(allWorkflowsInRepo);
    var urlOfMyWorkflowRun = await getURLOfMyWorkflowRun(userDetails, myWorkflow);
    opn(urlOfMyWorkflowRun);
})();