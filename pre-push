#!/usr/bin/env node 
const port = 3000;
const app = require("express")();
const request = require('request');
const opn = require('open');
const sodium = require('tweetsodium');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
var TOKEN;
var userDetails = {};
var scopeForARM = 'https://management.azure.com//user_impersonation';
var scopeForGraph = 'offline_access%20user.read%20Directory.AccessAsUser.All';
var tenant_id;
var password;
const client_id_graph = '3c2ff05c-d8db-48bf-ac19-9b0d7294e050';
const client_id_arm = '33c31634-d8df-4199-99f6-ae4b3fef50cd';
// var tenant_id = 'a45c7723-16d4-42ef-99b3-d2cb51fea2fe';
// var tenant_id = 'common';


function textColor(text, color) { 
	return `\x1b[${color}m${text}\x1b[0m`; 
}
function waitForTime(time){
	return new Promise(resolve => {
		setTimeout(function(){
			resolve();
		}, time);
	});
}

function getFileContent(file_name){
	return new Promise(resolve => {
		resolve(fs.readFileSync(file_name, "utf8").split("\n"));
	});
}
async function getGitHubPAT(){
	console.log();
	console.log("Please give your GitHub PAT Token in the file. \nOnce sure, save the file and proceed.");
	console.log();
	await opn('give_inputs.txt', {wait: true});
	return new Promise(async (resolve) => {
		var user_inputs = await getFileContent('give_inputs.txt');
		var split_input = user_inputs[0].replace(/\s+/g, '').split(":");
		userDetails[split_input[0]] = split_input[1];
		resolve();
	});
}
async function getTenantId(){
	console.log();
	console.log("Please give your TenantId in the file. \nOnce sure, save the file and proceed.");
	console.log();
	await opn('give_inputs.txt', {wait: true});
	return new Promise(async (resolve) => {
		var user_inputs = await getFileContent('give_inputs.txt');
		var split_input = user_inputs[1].replace(/\s+/g, '').split(":");
		tenant_id = split_input[1];
		resolve();
	});
}
async function getUserDetails(){
	var file_content = await getFileContent('give_inputs.txt');
	var split_input = file_content[0].replace(/\s+/g, '').split(":");
	if(split_input[1] === '' || split_input[1] === 'NA')
		await getGitHubPAT();
	else
		userDetails[split_input[0]] = split_input[1];
	// console.log("Your github Pat token is : " + userDetails['Github_PAT'].slice(0, 4) + '.......');

	split_input = file_content[1].replace(/\s+/g, '').split(":");
	if(split_input[1] === '' || split_input[1] === 'NA')
		await getTenantId();
	else
		tenant_id = split_input[1];
	
	return new Promise(function(resolve) {
		const { exec } = require('child_process');
		exec('git config --list', (error, stdout, stderr) => {
			var array_stdout = stdout.split("\n");
			for(var single_info of array_stdout){
				var info_splitted = single_info.split("=");
				if(info_splitted[0] === 'user.name'){
					userDetails['username'] = info_splitted[1];
				}

				if(info_splitted[0] === 'user.email'){
					userDetails['user_email'] = info_splitted[1];
				}

				if(info_splitted[0] === 'remote.origin.url'){
					userDetails['repo_name'] = info_splitted[1].split("https://github.com/")[1].split("/")[1].split(".")[0];
				}
			}
			resolve();
		});
  	});
}



function openSignInLink(scope, callback, client_id){
	return new Promise(resolve => {
		opn('https://login.microsoftonline.com/'+tenant_id+'/oauth2/v2.0/authorize?client_id='+client_id+'&response_type=code&redirect_uri='+callback+'&response_mode=query&scope='+scope+'&state=AzureShubhamLogIn');
		resolve();
	});
}
function getCallback(callback){
	return new Promise(resolve => {
		app.get(callback, function(req, res){
			code = req.query['code'];
			res.send("You are logged in, now you can go back to your terminal!");
			resolve();
		});
	});
}
function getAccessToken(endpoint, scope, callback, client_id){
	
	const options = {
		uri: 'https://login.microsoftonline.com/'+tenant_id+'/oauth2/v2.0/token',
		json: true,
		body: 'client_id='+client_id+'&scope='+scope+'&redirect_uri='+callback+'&code='+code+'&grant_type=authorization_code',
		headers: {
			"Content-Type": "application/x-www-form-urlencoded"
		}
	};
	
	return new Promise(resolve => {
		request.post(options, (err, res, body) => {
			if (err) {
				return console.log(err);
			}
			// console.log(`Status: ${res.statusCode}`);
			userDetails[endpoint] = body;
			// console.log(body);
			resolve();
		});	
	});
}

function getRepoPublicKey(repo_name, username){
	var opts = {
		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/secrets/public-key',
		headers: {
			'User-Agent': 'request',
			Authorization: `Bearer ${TOKEN}`
		}
	};

  	return new Promise(function(resolve, reject) {
    	request(opts, function(error, response, body){
			resolve(JSON.parse(response['body']));
		});
  	});
}
async function CreateNewSecret(secret_name, subscriptionAndResourceDetails, userDetails){
	var secret_value = {
		"clientId": userDetails['new_app_details']['spn_details']['appId'],
		"clientSecret": password,
		"subscriptionId": subscriptionAndResourceDetails['subscription']['subscriptionId'],
		"tenantId": tenant_id,
		"activeDirectoryEndpointUrl": "https://login.microsoftonline.com",
		"resourceManagementEndpointUrl": "https://management.azure.com"
	}
	const username = userDetails['username'];
	const user_email = userDetails['user_email'];
	const repo_name = userDetails['repo_name'];

	const repoPublicKey = await getRepoPublicKey(repo_name, username);
	const key = repoPublicKey['key'];

	const messageBytes = Buffer.from(JSON.stringify(secret_value));
	const keyBytes = Buffer.from(key, 'base64');

	const encryptedBytes = sodium.seal(messageBytes, keyBytes);
	const encrypted = Buffer.from(encryptedBytes).toString('base64');

	const body = {
			message: "Adding secret",
			committer: {
				name: username,
				email: user_email
			},
			encrypted_value: encrypted,
			key_id: repoPublicKey['key_id']
	};
	var opts = {
		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/secrets/'+secret_name,
		method: 'PUT',
		body: JSON.stringify(body),
		headers: {
			"Content-type": "application/json",
			'User-Agent': 'request',
			Authorization: `Bearer ${TOKEN}`
		}
	}

	return new Promise(resolve => {
		request(opts, function(error, response, body){
            resolve();
        });
	});


}
function getRepoSecrets(userDetails){
	const username = userDetails['username'];
	const repo_name = userDetails['repo_name'];
	// const TOKEN = userDetails['githubPAT'];

	var opts = {
		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/secrets',
		headers: {
			'User-Agent': 'request',
			Authorization: `Bearer ${TOKEN}`
		}
	};

  	return new Promise(function(resolve, reject) {
    	request(opts, function(error, response, body){
			resolve(JSON.parse(response['body'])['secrets']);
			// console.log(response['statusCode']);
		});
  	});
}
async function printRepoSecrets(userDetails){
	var repo_secrets = await getRepoSecrets(userDetails);
	console.log(repo_secrets);
}


function getSubscriptions(){
	var opts = {
		url: 'https://management.azure.com/subscriptions?api-version=2020-01-01',
		headers: {
			Authorization: userDetails['arm_details']['token_type'] + ' ' + userDetails['arm_details']['access_token']
		}
	};
	return new Promise(function(resolve, reject) {
		request(opts, function(error, response, body){
			userDetails['subscriptions'] = JSON.parse(response['body'])['value'];
			resolve();
		});
	});
}
function getResourceGroups(subscriptionId){
	var opts = {
		url: 'https://management.azure.com/subscriptions/'+subscriptionId+'/resourcegroups?api-version=2019-10-01',
		headers: {
			Authorization: userDetails['arm_details']['token_type'] + ' ' + userDetails['arm_details']['access_token']
		}
	};
	return new Promise(function(resolve, reject) {
		request(opts, function(error, response, body){
			userDetails['resource_groups'] = JSON.parse(response['body'])['value'];
			resolve();
		});
	});
}
function getResources(subscriptionId, resourceGroup){
	var opts = {
		url: "https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroup+"/resources?$filter=resourceType eq 'Microsoft.Web/sites'&api-version=2019-10-01",
		headers: {
			Authorization: userDetails['arm_details']['token_type'] + ' ' + userDetails['arm_details']['access_token']
		}
	};
	return new Promise(function(resolve, reject) {
		request(opts, function(error, response, body){
			userDetails['resources'] = JSON.parse(response['body'])['value'];
			resolve();
		});
	});
}



async function getSubscriptionInput(subscriptionAndResourceDetails){
	console.log();
	console.log(textColor("Please choose the subscription. Give a number in the give_inputs.txt file. \nOnce sure, save the file and proceed.", 36));
	for(var subscription_number = 0; subscription_number < userDetails['subscriptions'].length; subscription_number++){
		console.log(subscription_number + ' : ' + userDetails['subscriptions'][subscription_number]['displayName'] + '(' + userDetails['subscriptions'][subscription_number]['subscriptionId']+')');
	}
	await opn('give_inputs.txt', {wait: true});
	return new Promise(async (resolve) => {
		var user_inputs = await getFileContent('give_inputs.txt');
		var split_input = user_inputs[3].replace(/\s+/g, '').split(":");
		subscriptionAndResourceDetails['subscription'] = userDetails['subscriptions'][split_input[1]];
		resolve();
	});
}
async function getSubscriptionFromUser(){
	var subscriptionAndResourceDetails = {};
	if(userDetails['subscriptions'].length === 1){
		subscriptionAndResourceDetails['subscription'] = userDetails['subscriptions'][0];
		console.log();
		console.log("Subscription being used is : " + subscriptionAndResourceDetails['subscription']['displayName']);
	}
	else{
		var file_content = await getFileContent('give_inputs.txt');
		var split_input = file_content[3].replace(/\s+/g, '').split(":");
		if(split_input[1] === '' || split_input[1] === 'NA')
			await getSubscriptionInput(subscriptionAndResourceDetails);
		else
			subscriptionAndResourceDetails['subscription'] = userDetails['subscriptions'][split_input[1]];
	}
	
	return new Promise(resolve => {
		resolve(subscriptionAndResourceDetails);
	});
}

async function getResourceGroupInput(subscriptionAndResourceDetails){
	console.log();
	console.log(textColor("Please choose the Resource Group. Give a number in the give_inputs.txt file. \nOnce sure, save the file and proceed.", 36));
	for(var group_number = 0; group_number < userDetails['resource_groups'].length; group_number++){
		console.log(group_number + ' : ' + userDetails['resource_groups'][group_number]['name']);
	}
	await opn('give_inputs.txt', {wait: true});
	return new Promise(async (resolve) => {
		var user_inputs = await getFileContent('give_inputs.txt');
		var split_input = user_inputs[4].replace(/\s+/g, '').split(":");
		subscriptionAndResourceDetails['resource_group'] = userDetails['resource_groups'][split_input[1]];
		resolve();
	});
	
}
async function getResourceGroupFromUser(subscriptionAndResourceDetails){
	if(userDetails['resource_groups'].length === 1){
		subscriptionAndResourceDetails['resource_group'] = userDetails['resource_groups'][0];
		console.log();
		console.log("Resource Group being used is : " + subscriptionAndResourceDetails['resource_group']['name']);	
	}
	else{
		var file_content = await getFileContent('give_inputs.txt');
		var split_input = file_content[4].replace(/\s+/g, '').split(":");
		if(split_input[1] === '' || split_input[1] === 'NA')
			await getResourceGroupInput(subscriptionAndResourceDetails);
		else
			subscriptionAndResourceDetails['resource_group'] = userDetails['resource_groups'][split_input[1]];
	}
	return new Promise(resolve => {
		resolve();
	});
}

async function getResourceInput(subscriptionAndResourceDetails){
	console.log();
	console.log(textColor("Please choose the Resource. Give a number in the give_inputs.txt file. \nOnce sure, save the file and proceed.", 36));
	for(var resource_number = 0; resource_number < userDetails['resources'].length; resource_number++){
		console.log(resource_number + ' : ' + userDetails['resources'][resource_number]['name']);
	}
	await opn('give_inputs.txt', {wait: true});
	return new Promise(async (resolve) => {
		var user_inputs = await getFileContent('give_inputs.txt');
		var split_input = user_inputs[5].replace(/\s+/g, '').split(":");
		subscriptionAndResourceDetails['resource'] = userDetails['resources'][split_input[1]];
		resolve();
	});
}
async function getResourceFromUser(subscriptionAndResourceDetails){
	if(userDetails['resources'].length === 1){
		subscriptionAndResourceDetails['resource'] = userDetails['resources'][0];
		console.log();
		console.log("Resource being used is : " + subscriptionAndResourceDetails['resource']['name']);	
	}
	else{
		var file_content = await getFileContent('give_inputs.txt');
		var split_input = file_content[5].replace(/\s+/g, '').split(":");
		if(split_input[1] === '' || split_input[1] === 'NA')
			await getResourceInput(subscriptionAndResourceDetails);
		else
			subscriptionAndResourceDetails['resource'] = userDetails['resources'][split_input[1]];
	}
	return new Promise(resolve => {
		resolve(subscriptionAndResourceDetails);
	});
}



function getApplications(){
	var opts = {
		url: "https://graph.microsoft.com/v1.0/applications",
		headers: {
			Authorization: userDetails['graph_details']['token_type'] + ' ' + userDetails['graph_details']['access_token']
		}
	};
	return new Promise(function(resolve, reject) {
		request(opts, function(error, response, body){
			userDetails['applications'] = JSON.parse(response['body'])['value'];
			resolve();
		});
	});
}
function NewAppRequired(){
	for(var application of userDetails['applications']){
		if(application['displayName'] === 'AppForSPN'){
			return false;
		}
	}
	return true;
}
function createApp(){
	const options = {
		url: 'https://graph.microsoft.com/v1.0/applications',
		json: true,
		body: {
			"displayName": "AppForSPN"
		},
		headers: {
			"Content-Type": "application/json",
			Authorization: userDetails['graph_details']['token_type'] + ' ' + userDetails['graph_details']['access_token']
		}
	};
	return new Promise(resolve => {
		request.post(options, (err, res, body) => {
			if (err) {
				return console.log(err);
			}
			userDetails['new_app_details'] = body;
			resolve();
		});	
	});
}
function createServicePrincipal(){
	const options = {
		url: 'https://graph.microsoft.com/v1.0/serviceprincipals',
		json: true,
		body: {
			"appId": userDetails['new_app_details']['appId']
		},
		headers: {
			"Content-Type": "application/json",
			Authorization: userDetails['graph_details']['token_type'] + ' ' + userDetails['graph_details']['access_token']
		}
	};
	
	return new Promise(resolve => {
		request.post(options, (err, res, body) => {
			if (err) {
				return console.log(err);
			}
			userDetails['new_app_details']['spn_details'] = body;
			resolve();
		});
	});
}
function addPassword(){
	const options = {
		url: 'https://graph.microsoft.com/v1.0/applications/'+userDetails['new_app_details']['id']+'/addPassword',
		json: true,
		body: {
			"passwordCredential": {
				"displayName": "PasswordShubham"
			  }
		},
		headers: {
			"Content-Type": "application/json",
			Authorization: userDetails['graph_details']['token_type'] + ' ' + userDetails['graph_details']['access_token']
		}
	};
	
	return new Promise(resolve => {
		request.post(options, (err, res, body) => {
			if (err) {
				return console.log(err);
			}
			password = body['secretText'];
			// userDetails['new_app_details'] = body;
			resolve();
		});	
	});
}
function addRoleAssignment(subscriptionId, resourceGroup, guid){

	// console.log(subscriptionId);
	// console.log(resourceGroup);
	// console.log(guid);
	// console.log(userDetails['new_app_details']['spn_details']['id']);

	var opts = {
		url: 'https://management.azure.com/subscriptions/'+subscriptionId+'/resourcegroups/'+resourceGroup+'/providers/Microsoft.Authorization/roleAssignments/'+guid+'?api-version=2015-07-01',
		method: 'PUT',
		json: true,
		body: {
			"properties": {
				"roleDefinitionId": "/subscriptions/"+subscriptionId+"/resourcegroups/"+resourceGroup+"/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
				"principalId": userDetails['new_app_details']['spn_details']['id'],
				"scope": "/subscriptions/"+subscriptionId+"/resourcegroups/"+resourceGroup
			}
		},
		headers: {
			"Content-type": "application/json",
			'User-Agent': 'request',
			Authorization: userDetails['arm_details']['token_type'] + ' ' + userDetails['arm_details']['access_token']
		}
	};

	return new Promise(resolve => {
		request(opts, function(error, response, body){
			userDetails['new_role_assignment'] = body;
			resolve();
		});
	});
}


async function OAuthGraph(){
	await openSignInLink(scopeForGraph, 'http://localhost:3000/callback', client_id_graph);
	await getCallback('/callback');
	await getAccessToken('graph_details', scopeForGraph, 'http://localhost:3000/callback', client_id_graph);
}
async function OAuthARM(){
	await openSignInLink(scopeForARM, 'http://localhost:3000/callbackarm', client_id_arm);
	await getCallback('/callbackarm');
	await getAccessToken('arm_details', scopeForARM, 'http://localhost:3000/callbackarm', client_id_arm);
}


(async function(){
	app.listen(port, function () {
		console.log("Server Has Started!");
	});
	var guid = uuidv4();
	await getUserDetails();
	TOKEN = userDetails['Github_PAT'];
	await OAuthGraph();
	await OAuthARM();
	await waitForTime(1000);
	await getSubscriptions();
	var subscriptionAndResourceDetails = await getSubscriptionFromUser();

	await getResourceGroups(subscriptionAndResourceDetails['subscription']['subscriptionId']);
	await getResourceGroupFromUser(subscriptionAndResourceDetails);
	
	await getResources(subscriptionAndResourceDetails['subscription']['subscriptionId'], subscriptionAndResourceDetails['resource_group']['name']);
	await getResourceFromUser(subscriptionAndResourceDetails);

	await getApplications();
	if(NewAppRequired()){
		await createApp();
		await createServicePrincipal();
		await addPassword();
		await waitForTime(3000);
		await CreateNewSecret('AZURE_CREDENTIALS', subscriptionAndResourceDetails, userDetails);
		await addRoleAssignment(subscriptionAndResourceDetails['subscription']['subscriptionId'], subscriptionAndResourceDetails['resource_group']['name'], guid);
	}
	
	// console.log(userDetails['graph_details']);
	// console.log(userDetails['arm_details']);
	console.log();
	console.log('***************************************************************************************************************************************************************');
	console.log();
	console.log(`You can have a look at the workflow runs using this link:\n\n${textColor('https://github.com/'+userDetails['username']+'/'+userDetails['repo_name']+'/actions', 95)}`);
	console.log('                                       Or                                                                          ');
	console.log('IF A WORKFLOW CREATED BY THIS PACKAGE IS BEING TRIGGERED THEN, You can run this command on your terminal to open the link in browser :'+ textColor(' node open_workflow_run', 95));
	console.log();
	console.log('***************************************************************************************************************************************************************');
	console.log();
	setTimeout(process.exit(0), 200);
})();





//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************

	







// const port = 3000
// const app = require("https-localhost")();
// const request = require('request');
// const opn = require('opn');
// const sodium = require('tweetsodium');
// const fs = require('fs');
// process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 1;

// var TOKEN;
// var userDetails = {};
// var scope = 'offline_access%20user.read';
// const tenant_id = '72f988bf-86f1-41af-91ab-2d7cd011db47';
// const client_id = 'a9c73ef8-fd2a-41c5-9277-78cc88362b49';



// function textColor(text, color) { 
// 	return `\x1b[${color}m${text}\x1b[0m`; 
// }


// function getFileContent(file_name){
// 	return new Promise(resolve => {
// 		resolve(fs.readFileSync(file_name, "utf8").split("\n"));
// 	});
// }

// function getGitHubPAT(userDetails){
// 	return new Promise(resolve => {
// 		console.log();
// 		console.log("Please give your GitHub PAT Token in the file. \nOnce sure, end your token with a $$ to inform that you are done.");
// 		opn('give_inputs.txt');
// 		var current_line_number = 0;
// 		var i = setInterval(async function(){
// 			var user_inputs = await getFileContent('give_inputs.txt');
// 			if(current_line_number !== 0 || user_inputs == ''){
// 				clearInterval(i);
// 				resolve();
// 			}
// 			else{
// 				var split_input = user_inputs[current_line_number].replace(/\s+/g, '').split(":");
// 				if(!(split_input[1] === '' || split_input[1] === 'NA' || !(split_input[1].endsWith('$$')))){
// 					userDetails[split_input[0]] = split_input[1].split('$')[0];
// 					current_line_number++;
// 				}
// 			}
// 		}, 3000);
// 	});
// }

// async function getUserDetails(){
// 	var file_content = await getFileContent('give_inputs.txt');
// 	var split_input = file_content[0].replace(/\s+/g, '').split(":");
// 	if(!split_input[1].endsWith('$$'))
// 		await getGitHubPAT(userDetails);
// 	else
// 		userDetails[split_input[0]] = split_input[1].split('$')[0];
// 	console.log("Your github Pat token is : " + userDetails['Github_PAT'].slice(0, 4) + '.......');
// 	return new Promise(function(resolve) {
// 		const { exec } = require('child_process');
// 		exec('git config --list', (error, stdout, stderr) => {
// 			var array_stdout = stdout.split("\n");
// 			for(var single_info of array_stdout){
// 				var info_splitted = single_info.split("=");
// 				if(info_splitted[0] === 'user.name'){
// 					userDetails['username'] = info_splitted[1];
// 				}

// 				if(info_splitted[0] === 'user.email'){
// 					userDetails['user_email'] = info_splitted[1];
// 				}

// 				if(info_splitted[0] === 'remote.origin.url'){
// 					userDetails['repo_name'] = info_splitted[1].split("https://github.com/")[1].split("/")[1].split(".")[0];
// 				}
// 			}
// 			resolve();
// 		});
//   	});
// }



// function openSignInLink(){
// 	return new Promise(resolve => {
// 		opn('https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id='+client_id+'&response_type=code&redirect_uri=https://localhost:3000/callback&response_mode=query&scope='+scope+'&state=AzureShubhamLogIn');
// 		// opn('https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=f64517c8-4cb9-4149-b29e-4a3ee66e7133&response_type=id_token+code&redirect_uri=https://localhost:3000/callback&response_mode=query&scope=offline_access%20user.read%20user_impersonation&state=AzureShubhamLogIn');	
// 		resolve();
// 	});
// }
// function getCallback(){
// 	return new Promise(resolve => {
// 		app.get('/callback', function(req, res){
// 			code = req.query['code'];
// 			res.send("You are logged in, now you can go back to your terminal!");
// 			resolve();
// 		});
// 	});
// }
// function getAccessToken(){
	
// 	const options = {
// 		uri: 'https://login.microsoftonline.com/common/oauth2/v2.0/token',
// 		json: true,
// 		body: 'client_id='+client_id+'&scope='+scope+'&redirect_uri=https://localhost:3000/callback&code='+code+'&grant_type=authorization_code',
// 		headers: {
// 			"Content-Type": "application/x-www-form-urlencoded"
// 		}
// 	};
	
// 	return new Promise(resolve => {
// 		request.post(options, (err, res, body) => {
// 			if (err) {
// 				return console.log(err);
// 			}
// 			// console.log(`Status: ${res.statusCode}`);
// 			userDetails['azure_details'] = body;
// 			// console.log(body);
// 			resolve();
// 		});	
// 	});
// }



// function getRepoPublicKey(repo_name, username){
// 	var opts = {
// 		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/secrets/public-key',
// 		headers: {
// 			'User-Agent': 'request',
// 			Authorization: `Bearer ${TOKEN}`
// 		}
// 	};

//   	return new Promise(function(resolve, reject) {
//     	request(opts, function(error, response, body){
// 			resolve(JSON.parse(response['body']));
// 		});
//   	});
// }
// async function CreateNewSecret(secret_name, secret_value, userDetails){
// 	const username = userDetails['username'];
// 	const user_email = userDetails['user_email'];
// 	const repo_name = userDetails['repo_name'];

// 	const repoPublicKey = await getRepoPublicKey(repo_name, username);
// 	const key = repoPublicKey['key'];

// 	const messageBytes = Buffer.from(secret_value);
// 	const keyBytes = Buffer.from(key, 'base64');

// 	const encryptedBytes = sodium.seal(messageBytes, keyBytes);
// 	const encrypted = Buffer.from(encryptedBytes).toString('base64');

// 	const body = {
// 			message: "Adding secret",
// 			committer: {
// 				name: username,
// 				email: user_email
// 			},
// 			encrypted_value: encrypted,
// 			key_id: repoPublicKey['key_id']
// 	};
// 	var opts = {
// 		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/secrets/'+secret_name,
// 		method: 'PUT',
// 		body: JSON.stringify(body),
// 		headers: {
// 			"Content-type": "application/json",
// 			'User-Agent': 'request',
// 			Authorization: `Bearer ${TOKEN}`
// 		}
// 	}

// 	return new Promise(resolve => {
// 		request(opts, function(error, response, body){
// 			// console.log("hello");
// 			// console.log(JSON.parse(body));
// 			// console.log("hello");
//             resolve();
//         });
// 	});


// }
// function getRepoSecrets(userDetails){
// 	const username = userDetails['username'];
// 	const repo_name = userDetails['repo_name'];
// 	// const TOKEN = userDetails['githubPAT'];

// 	var opts = {
// 		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/secrets',
// 		headers: {
// 			'User-Agent': 'request',
// 			Authorization: `Bearer ${TOKEN}`
// 		}
// 	};

//   	return new Promise(function(resolve, reject) {
//     	request(opts, function(error, response, body){
// 			resolve(JSON.parse(response['body'])['secrets']);
// 			// console.log(response['statusCode']);
// 		});
//   	});
// }
// async function printRepoSecrets(userDetails){
// 	var repo_secrets = await getRepoSecrets(userDetails);
// 	console.log(repo_secrets);
// }



// function getUserProfileDetails(){
// 	// console.log();
// 	// console.log(userDetails['azure_details']['token_type']);
// 	var opts = {
// 		// url: 'https://graph.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/users/'+userDetails['azure_details']['id']+'/appRoleAssignments?api-version=1.6',
// 		// url: 'https://management.azure.com/subscriptions?api-version=2020-01-01',
// 		url: 'https://graph.microsoft.com/v1.0/me',
// 		headers: {
// 			Authorization: userDetails['azure_details']['token_type'] + ' ' + userDetails['azure_details']['access_token']
// 		}
// 	};
// 	return new Promise(function(resolve, reject) {
// 		request(opts, function(error, response, body){
// 			// console.log(JSON.parse(response['body']));
// 			userDetails['user_profile'] = JSON.parse(response['body']);
// 			resolve();
// 		});
// 	});
// }
// function getAppRoleAssignments(){
// 	// const options = {
// 	// 	url: 'https://graph.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/users/'+userDetails['user_profile']['id']+'/appRoleAssignments?api-version=1.6',
// 	// 	// uri: 'https://graph.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/servicePrincipals',
// 	// 	json: true,
// 	// 	body: {
// 	// 		'appId': client_id,
// 	// 		'accountEnable': true
// 	// 	},
// 	// 	headers: {
// 	// 		"Content-Type": "application/json",
// 	// 		Authorization: userDetails['azure_details']['token_type'] + ' ' + userDetails['azure_details']['access_token']
// 	// 	}
// 	// };
	
// 	// return new Promise(resolve => {
// 	// 	request.post(options, (err, res, body) => {
// 	// 		if (err) {
// 	// 			return console.log(err);
// 	// 		}
// 	// 		console.log(`Status: ${res.statusCode}`);
// 	// 		console.log(body);
// 	// 		resolve();
// 	// 	});	
// 	// });

// 	// console.log(userDetails['user_profile']['id']);
// 	// console.log(userDetails['azure_details']['access_token']);
// 	var opts = {
// 		// url: 'https://graph.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/users/'+userDetails['azure_details']['id']+'/appRoleAssignments?api-version=1.6',
// 		// url: 'https://management.azure.com/subscriptions?api-version=2020-01-01',
// 		// url: 'https://graph.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/users/'+userDetails['user_profile']['id']+'/appRoleAssignments?api-version=1.6',
// 		url: 'https://graph.microsoft.com/beta/users/'+userDetails['user_profile']['id']+'/appRoleAssignments',
// 		headers: {
// 			Authorization: userDetails['azure_details']['token_type'] + ' ' + userDetails['azure_details']['access_token']
// 		}
// 	};
// 	return new Promise(function(resolve, reject) {
// 		request(opts, function(error, response, body){
// 			// console.log(JSON.parse(response['body']));
// 			// userDetails['user_profile'] = JSON.parse(response['body']);
// 			userDetails['azure_details']['appRoleAssignments'] = [];
			
// 			if(JSON.parse(response['body'])['value']){
// 				for(var appRoleAssignment of JSON.parse(response['body'])['value']){
// 					userDetails['azure_details']['appRoleAssignments'].push({
// 						'id': appRoleAssignment['id'],
// 						'appRoleId': appRoleAssignment['appRoleId'],
// 						'resourceId': appRoleAssignment['resourceId'],
// 						'resourceName': appRoleAssignment['resourceDisplayName']
// 					});
// 					console.log(appRoleAssignment['resourceDisplayName']);
// 				}
// 			}
			
// 			resolve();
// 		});
// 	});
// }
// function getServicePrincipals(){
// 	var opts = {
// 		url: 'https://graph.microsoft.com/v1.0/servicePrincipals/'+userDetails['user_profile']['id']+'/ownedObjects',
// 		headers: {
// 			Authorization: userDetails['azure_details']['token_type'] + ' ' + userDetails['azure_details']['access_token']
// 		}
// 	};
// 	return new Promise(function(resolve, reject) {
// 		request(opts, function(error, response, body){
// 			console.log("Service Principals:");
// 			console.log(JSON.parse(response['body']));
// 			resolve();
// 		});
// 	});
// }

// (async function(){	
// 	app.listen(port, () => console.log(`Example app listening at https://localhost:${port}`));
// 	await getUserDetails();
// 	TOKEN = userDetails['Github_PAT'];
// 	await openSignInLink();
// 	await getCallback();
// 	await getAccessToken();
// 	// await getUserProfileDetails();
// 	// await getAppRoleAssignments();
// 	// await getServicePrincipals();
// 	// console.log(userDetails);
// 	// await CreateNewSecret('FIRST_SECRET', 'My secret is ..', userDetails);
// 	// await printRepoSecrets(userDetails);
// 	console.log('***************************************************************************************************************************************************************');
// 	console.log();
// 	console.log(`You can have a look at the workflow runs using this link:\n\n${textColor('https://github.com/'+userDetails['username']+'/'+userDetails['repo_name']+'/actions', 95)}`);
// 	console.log('                                       Or                                                                          ');
// 	console.log('IF A WORKFLOW CREATED BY THIS PACKAGE IS BEING TRIGGERED THEN, You can run this command on your terminal to open the link in browser : node open_workflow_run');
// 	console.log('***************************************************************************************************************************************************************');
// 	setTimeout(process.exit(0), 1000);
// })();





//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************

		// 	nodeFetch('https://api.github.com/repos/'+username+'/'+repo_name+'/actions/secrets/'+secret_name,{
	// 		json: true,
	// 		method: "put",
	// 		body: JSON.stringify(body),
	// 		headers: {
	// 			"Content-type": "application/json",
	// 			Authorization: `Bearer ${TOKEN}`
	// 		}
	// 	})
	// 	.then(res => res.json())
	// 	.then(json => {
	// 		console.log();
	// 		// console.log(json);
	// 		resolve();
	// 	})
	// 	.catch(err => console.error(err));

	
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************






// function getUrlFromWorkflowLatestRun(workflow_id){
// 	var url;
// 	var opts = {
// 		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/workflows/' + workflow_id + '/runs',
// 		headers: {
// 			'User-Agent': 'request',
// 			Authorization: `Bearer ${TOKEN}`
// 		}
// 	};

// 	return new Promise(function(resolve, reject) {
// 		request(opts, function(error, response, body){
// 			// console.log("HEYYY");
// 			console.log(JSON.parse(response['body'])['workflow_runs']);
// 			url = JSON.parse(response['body'])['workflow_runs'][0]['html_url'];
// 			resolve(url);
// 		});
// 	});
// }

// async function getUrlOfWorkflow(){
	
// 	var opts = {
// 		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/workflows',
// 		headers: {
// 			'User-Agent': 'request',
// 			Authorization: `Bearer ${TOKEN}`
// 		}
// 	};

// 	return new Promise(function(resolve, reject) {
// 		request(opts, async function(error, response, body){
// 			// console.log(JSON.parse(response['body'])['workflows']);
// 			var url = await getUrlFromWorkflowLatestRun(JSON.parse(response['body'])['workflows'][0]['id']);
// 			resolve(url);
// 		});
// 	});
// }

// async function PrintUrlOfWorkflow() {
// 	var workflow_url = await getUrlOfWorkflow();
// 	console.log('**********************************************************************');
// 	console.log("You can visit the following url to have a look at the workflow run: ");
// 	console.log();
// 	console.log(workflow_url);
// 	console.log();
// 	console.log('**********************************************************************');
// 	console.log();
// 	// console.log('Opening the link in browser....');
// 	// setTimeout(openLinkInBrowser.bind(null, workflow_url), 2000);
// }





//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************


















// const Azure = require('azure');
// const MsRest = require('ms-rest-azure');

// MsRest.interactiveLogin((err, credentials) => {
//   if (err) throw err;

//   let storageClient = Azure.createStorageManagementClient(credentials, 'subscription-id');

//   // ..use the client instance to manage service resources.
// });






// var msRestAzure = require('ms-rest-azure');
// // var resourceManagement = require("azure-arm-resource");
 
// // Interactive Login

// async function main() {
// 	let promise = new Promise((resolve, reject) => {
// 		setTimeout(() => msRestAzure.interactiveLogin(), 1000)
// 	});
//   const credentials = await promise;
//   // OR const credentials = await msRestAzure.loginWithServicePrincipalSecret("clientId", "secret", "domain");
//   // OR any other login method from msRestAzure.
//   // const client = new KeyVault.KeyVaultClient(credentials);
// }

// main();







// msRestAzure.interactiveLogin(function(err, credentials) {
	
// 	console.log(credentials);
//  	var client = new resourceManagement.ResourceManagementClient(credentials, '99a258e9-d7be-4938-994e-83c06a7bf48f');
//  	client.resources.list(function(err, result) {
// 	   	if (err) console.log(err);
// 	   	console.log(result);
// 	});
// });

// const subClient = new ArmResource.SubscriptionClient(credentials);
// subClient.subscriptions.list().then(data => {
//   console.log(data);
// })


//Client ID : 24ddabd1-f487-4ecb-b3ea-d55a312985b3
//Tenant ID : 72f988bf-86f1-41af-91ab-2d7cd011db47
//Subscription ID : 99a258e9-d7be-4938-994e-83c06a7bf48f
//Client secret : 9UwJmF8dvu14T_3r5W..63sg6~6L2~tBJi
// Azure PAT : 2xgqd7c3obc3l4no7xxm2sxau4e4n7mf2vjtg5tk7k54d7qvw73a














// function func(){
// 	console.log("Ready to fetch");
// }

// setTimeout(func, 10000);



//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************



// var fs = require('fs');
// const readline = require('readline');

// console.log(process);

// // fs.writeFileSync('abcd.txt', process, "utf8");


// const rl = readline.createInterface({
//   input: process.stdin,
//   output: process.stdout
// });



// rl.question('What do you think of Node.js? ', (answer) => {
//   // TODO: Log the answer in a database
//   console.log(`Thank you for your valuable feedback:`);
//   console.log("\n");
//   console.log(`Thank you for your valuable feedback: abcd`);

//   rl.close();
// });



// const prompt = require('prompt');

// prompt.start();

// prompt.get(['username', 'email'], function (err, result) {
//     if (err) { return onErr(err); }
//     console.log('Command-line input received:');
//     console.log('  Username: ' + result.username);
//     console.log('  Email: ' + result.email);
// });

// function onErr(err) {
//     console.log(err);
//     return 1;
// }




//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************



// function getFileContent(path){
// 	var opts = {
// 		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/contents/'+path,
// 		headers: {
// 			'User-Agent': 'request',
// 			Authorization: `Bearer ${TOKEN}`,
// 			"Accept": "application/vnd.github.v3.param[+json]"
// 		}
// 	};

// 	  return new Promise(function(resolve, reject) {
// 		request(opts, function(error, response, body){
// 			let base64_content = JSON.parse(response['body'])['content'];
// 			// console.log("HERE");
// 			// console.log(response['body']);
// 			let ascii_content;
// 			if(JSON.parse(response['body'])['message'] === "Not Found"){
// 				// console.log("Inside");
// 				ascii_content = JSON.parse(response['body'])['message'];
// 				// console.log("Inside");
// 			}
// 			else{
// 				let buff_content = new Buffer.from(base64_content, 'base64');
// 				ascii_content = buff_content.toString('ascii');
// 			}
// 			resolve(ascii_content);
// 		});
// 	  });
// }


// async function exisitingWorkflowUsingYamlParsing(workflow){
// 	var path = workflow['path'];
// 	var file_content = await getFileContent(path);

// 	file_content = file_content.split("\n");
// 	// console.log(file_content);
// 	return new Promise(function(resolve){
// 		if(file_content === "Not Found")
// 			resolve(0);
// 		for(var line_number = 0; line_number < file_content.length; line_number++){
// 			if(file_content[line_number].startsWith('on:', 0)){
// 				var findingPushLineNumber = line_number;
// 				while(findingPushLineNumber < file_content.length && !file_content[findingPushLineNumber].startsWith("  push:", 0)){
// 					findingPushLineNumber++;
// 				}
// 				if(findingPushLineNumber !== file_content.length){
// 					resolve(1);
// 				}
// 				break;
// 			}
// 		}
// 		resolve(0);
// 	});
// }




// async function makeExisitingWorkflowRunsRequest(workflow){

// 	var workflow_exists = 0;
// 	var workflow_id = workflow['id'];
// 	var workflow_run_details;

// 	function getWorkflowRunsDetails(workflow_id){
// 		var opts = {
// 			url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/workflows/' + workflow_id + '/runs',
// 			headers: {
// 				'User-Agent': 'request',
// 				Authorization: `Bearer ${TOKEN}`
// 			}
// 		};
		
// 		// console.log("All runs for the workflow:");
// 		return new Promise(function(resolve, reject) {
// 			request(opts, function(error, response, body){
// 				// console.log(JSON.parse(response['body'])['workflow_runs']);
// 				resolve(JSON.parse(response['body'])['workflow_runs']);
// 			});
// 		});
// 	}

// 	workflow_run_details = await getWorkflowRunsDetails(workflow_id);
// 	if(workflow_run_details.length === 0){
// 		workflow_exists = await exisitingWorkflowUsingYamlParsing(workflow);
// 	}
// 	// workflow_exists = await exisitingWorkflowUsingYamlParsing(workflow);
	
	

// 	return new Promise(function(resolve, reject) {
// 		for(var workflow_run of workflow_run_details) {
// 			if(workflow_run['event'] == 'push'){
// 				workflow_exists = 1;
// 			}
// 		}
// 		resolve(workflow_exists);
// 	});
// }



// async function exisitingWorkflowTriggeredByPush(){
// 	// console.log("All workflows:");
// 	if(response['body']){
// 		// console.log(JSON.parse(response['body']));
// 		for(var workflow of JSON.parse(response['body'])['workflows']){
// 			// console.log("HEYY");
// 			var workflow_exists = await makeExisitingWorkflowRunsRequest(workflow);
// 			if(workflow_exists)
// 				return 1;
// 		}
// 	}
// 	return 0;
// }