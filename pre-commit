#!/usr/bin/env node 

const fs = require('fs');
const request = require('request');
const opn = require('open');
const sodium = require('tweetsodium');
const { exec } = require('child_process');
const {defaultEditor, getEditor, allEditors} = require('env-editor');

var TOKEN;
function textColor(text, color) { 
	return `\x1b[${color}m${text}\x1b[0m`; 
}
function waitForTime(time){
	return new Promise(resolve => {
		setTimeout(function(){
			resolve();
		}, time);
	});
}


function getFileContent(file_name){
	return new Promise(resolve => {
		resolve(fs.readFileSync(file_name, "utf8").split("\n"));
	});
}

async function getGitHubPAT(userDetails){
	console.log();
	console.log("Please give your GitHub PAT Token in the file. \nOnce sure, save the file and proceed.");
	console.log();
	await opn('give_inputs.txt', {wait: true});
	return new Promise(async (resolve) => {
		var user_inputs = await getFileContent('give_inputs.txt');
		var split_input = user_inputs[0].replace(/\s+/g, '').split(":");
		userDetails[split_input[0]] = split_input[1];
		resolve();
	});
}

async function getUserDetails(userDetails){
	var file_content = await getFileContent('give_inputs.txt');
	var split_input = file_content[0].replace(/\s+/g, '').split(":");
	if(split_input[1] === '' || split_input[1] === 'NA')
		await getGitHubPAT(userDetails);
	else
		userDetails[split_input[0]] = split_input[1];
	console.log("Your github Pat token is : " + userDetails['Github_PAT'].slice(0, 4) + '.......');
  	return new Promise(function(resolve){
		exec('git config --list', (error, stdout, stderr) => {
			var array_stdout = stdout.split("\n");
			for(var single_info of array_stdout){
				var info_splitted = single_info.split("=");
				if(info_splitted[0] === 'user.name'){
					userDetails['username'] = info_splitted[1];
				}

				if(info_splitted[0] === 'user.email'){
					userDetails['user_email'] = info_splitted[1];
				}

				if(info_splitted[0] === 'remote.origin.url'){
					userDetails['repo_name'] = info_splitted[1].split("https://github.com/")[1].split("/")[1].split(".")[0];
				}
			}

			resolve();
		});
  	});
}


function getRepoPath(){
	return new Promise(resolve => {
		var repo_path = __dirname.split("/").pop().split('\\');
		var temp_path = repo_path.splice(-2,2);
		repo_path = repo_path.join('\\');
		resolve(repo_path);
	});
}
function getAllFiles(repo_path){
	return new Promise(resolve => {
		fs.readdir(repo_path, (err, files) => {
			resolve(files);
		});
	});
}
function isDotnetCoreRepo(files){
    
	return new Promise(resolve => {
		resolve(
			files.some((file) => {
			return file.toLowerCase().endsWith("sln") || file.toLowerCase().endsWith("csproj") || file.toLowerCase().endsWith("fsproj");
		}));
	});
}
function isNodeRepo(files){
    var nodeFilesRegex = '\\.ts$|\\.js$|package\\.json$|node_modules';
	return new Promise(resolve => {
		resolve(
			files.some((file) => {
				var result = new RegExp(nodeFilesRegex).test(file.toLowerCase());
				return result;
		}));
	});
}
function isPythonRepo(files){
    var pythonRegex = '.py$';
	return new Promise(resolve => {
		resolve(
			files.some((file) => {
			var result = new RegExp(pythonRegex).test(file.toLowerCase());
			return result;
		}));
	}); 
}
async function getRepoAnalysis(files){
	var repo_languages = [];
	var isDotnetCore = await isDotnetCoreRepo(files);
	var isNode = await isNodeRepo(files);
	var isPython = await isPythonRepo(files);
	return new Promise(resolve => {
		if(isDotnetCore){
			repo_languages.push('dotnet');
		}
		if(isNode){
			repo_languages.push('node');
		}
		if(isPython){
			repo_languages.push('python');
		}
		resolve(repo_languages);
	});
}



function printAllWorkflowsOnTerminal(repo_language, templateWorkflows, userDetails){
	console.log();
	console.log(textColor("Give the number to the workflow you want in the file appropriately.\nOnce sure, save the file and proceed ahead..", 36));
	console.log();
	return new Promise(resolve => {
		exec('ls "templates/'+repo_language, (error, stdout, stderr) => {
			var file_names = stdout.split("\n");
			for(var workflow_number = 0; workflow_number < file_names.length - 1; workflow_number++){
				templateWorkflows.push(file_names[workflow_number]);
				console.log(workflow_number + " : " + file_names[workflow_number]);
			}
			resolve();
		});
	});
}
async function getWorkflowInput(repo_language, userDetails){
	await opn('give_inputs.txt', {wait: true});
	return new Promise(async (resolve) => {
		var user_inputs = await getFileContent('give_inputs.txt');
		var split_input = user_inputs[2].replace(/\s+/g, '').split(":");
		userDetails[split_input[0]] = split_input[1];
		resolve();
	});
}

function CreateAndRunWorkflow(userDetails, repo_analysis_result){
	const username = userDetails['username'];
	const user_email = userDetails['user_email'];
	const repo_name = userDetails['repo_name'];
	var templateWorkflows = [];
	var opts = {
		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/workflows',
		headers: {
			'User-Agent': 'request',
			Authorization: `Bearer ${TOKEN}`
		}
	};
	return new Promise(function(resolve, reject) {
		request(opts, function(error, response, body){	

			function getPushTriggeredWorkflowExistStatus() {
				return new Promise(resolve => {
					exec('ls ".github/workflows', (error, stdout, stderr) => {
						var file_names = stdout.split("\n");
						var workflow_triggers_on_push = 0;
						for(var file_name of file_names){
							if(file_name.length === 0)
								continue;
							var file_content = fs.readFileSync('.github/workflows/'+file_name, "utf8").split("\n");
			
							for(var line_number = 0; line_number < file_content.length; line_number++){
								if(file_content[line_number].startsWith('on:', 0)){
									var findingPushLineNumber = line_number;
									while(findingPushLineNumber < file_content.length && !file_content[findingPushLineNumber].startsWith("  push:", 0)){
										findingPushLineNumber++;
									}
									if(findingPushLineNumber !== file_content.length){
										workflow_triggers_on_push = 1;
									}
									break;
								}
							}
							if(workflow_triggers_on_push == 1)
								break;
						}
						resolve(workflow_triggers_on_push);
					});
				});
			}
			
			async function createNewWorkflowFunction(){
				var workflow_triggers_on_push = await getPushTriggeredWorkflowExistStatus();
				if(workflow_triggers_on_push){
					console.log('--------------------------------------------------------------------------------------------');
					console.log();
					console.log('Another Workflow exists that will be triggered on push.. Therefore not creating new workflow..');
					console.log();
					console.log('---------------------------------------------------------------------------------------------');
					console.log();
					return 1;
				}

				console.log("Workflow needs to be created.. Please wait a moment.");
				await printAllWorkflowsOnTerminal(repo_analysis_result[0], templateWorkflows, userDetails);
				var file_content = await getFileContent('give_inputs.txt');
				var split_input = file_content[2].replace(/\s+/g, '').split(":");
				if(split_input[1] === '' || split_input[1] === 'NA')
					await getWorkflowInput(repo_analysis_result[0], userDetails);
				else
					userDetails[split_input[0]] = split_input[1];
				
				var workflow_file = 'templates/'+repo_analysis_result[0]+'/'+templateWorkflows[userDetails['workflow']];
				console.log("New " + templateWorkflows[userDetails['workflow']] + " file created...");
				console.log();
				console.log("Opening the file for you to view it...");
				await waitForTime(500);
				exec('mkdir ".github/workflows"', (error, stdout, stderr) => {
					exec('cp '+ workflow_file + ' .github/workflows/workflow.yml', (error, stdout, stderr) => {
						exec('git add ".github"', (error, stdout, stderr) => {
							console.log(stdout);
							
						});
					});
				});
				return 0;
			}
			resolve(createNewWorkflowFunction());
		});
	});
}



(async function(){
	// opn('give_inputs.txt');
	// await waitForTime(5000);
	// console.log("again");
	// opn('give_inputs.txt');
	// await waitForTime(5000);
	// console.log("Afain");
	// opn('give_inputs.txt');

	// console.log(getEditor('wstorm'));
	// console.log();
	// open('give_inputs.txt', {
	// 	app: '/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl'
	// })

	

	// var userDetails = {};
	// var repo_path = await getRepoPath();
	// await getUserDetails(userDetails);
	// TOKEN = userDetails['Github_PAT'];
	// var repo_files = await getAllFiles(repo_path);
	// var repo_analysis_result = await getRepoAnalysis(repo_files);
	// await CreateAndRunWorkflow(userDetails, repo_analysis_result);
	// console.log(userDetails);
})();
















// var current_line_number = 0;
		// while(1){
		// 	var user_inputs = fs.readFileSync('give_inputs.txt', "utf8").split("\n");	
		// 	if(current_line_number == 1 || user_inputs[current_line_number] == ''){
		// 		break;
		// 	}
		// 	var split_input = user_inputs[current_line_number].replace(/\s+/g, '').split(":");
		// 	if(split_input[1] === '' || split_input[1] === 'NA' || !(split_input[1].endsWith('$$'))){
		// 		continue;
		// 	}
		// 	userDetails[split_input[0]] = split_input[1];
		// 	current_line_number++;
		// }

		//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*********

// function getGithubPat(userDetails){
// 	var githubPat;
// 	return new Promise(function(resolve){
// 		const rl = readline.createInterface({
// 			input: process.stdin,
// 			output: process.stdout
// 		});
	
// 		rl.question("Give your GitHub PAT Token: ", function(pat_token) {
// 			githubPat = pat_token;
// 			resolve(githubPat);
// 		});
// 	});
// }



//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************

// const body = {
// 	message: "Adding Workflow",
// 	committer: {
// 		name: username,
// 		email: user_email
// 	},
// 	content: base64_workflow_yaml
// };


// nodeFetch('https://api.github.com/repos/'+username+'/'+repo_name+'/contents/.github/workflows/workflow.yaml', {
				// 	json: true,
				// 	method: "put",
				// 	body: JSON.stringify(body),
				// 	headers: {
				// 		"Content-type": "application/json",
				// 		Authorization: `Bearer ${TOKEN}`
				// 	}
				// })
				// .then(res => res.json())
				// .then(json => {
				// 	console.log();
				// 	console.log('Workflow triggered!! :)');
				// 	exec('git pull', (error, stdout, stderr) => {
				// 		console.log(stdout);
				// 	});
				// 	// console.log(json);
				// 	return 0;	
				// })
				// .catch(err => console.error(err));
				// // setTimeout(PrintUrlOfWorkflow, 25000);


//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************





// function openLinkInBrowser(url) {
// 	opn(url);
// }

// function getUrlFromWorkflowLatestRun(workflow_id){
// 	var url;
// 	var opts = {
// 		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/workflows/' + workflow_id + '/runs',
// 		headers: {
// 			'User-Agent': 'request',
// 			Authorization: `Bearer ${TOKEN}`
// 		}
// 	};

// 	  return new Promise(function(resolve, reject) {
// 		request(opts, function(error, response, body){
// 			// console.log("HEYYY");
// 			// console.log(JSON.parse(response['body'])['workflow_runs']);
// 			url = JSON.parse(response['body'])['workflow_runs'][0]['html_url'];
// 			resolve(url);
// 		});
// 	  });
// }


// async function getUrlOfWorkflow(){
	
// 	var opts = {
// 		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/workflows',
// 		headers: {
// 			'User-Agent': 'request',
// 			Authorization: `Bearer ${TOKEN}`
// 		}
// 	};

// 	  return new Promise(function(resolve, reject) {
// 		request(opts, async function(error, response, body){
// 			// console.log(JSON.parse(response['body'])['workflows']);
// 			var url = await getUrlFromWorkflowLatestRun(JSON.parse(response['body'])['workflows'][0]['id']);
// 			resolve(url);
// 		});
// 	  });
// }







// async function PrintUrlOfWorkflow() {
// 	var workflow_url = await getUrlOfWorkflow();
// 	console.log('**********************************************************************');
// 	console.log("You can visit the following url to have a look at the workflow run: ");
// 	console.log();
// 	console.log(workflow_url);
// 	console.log();
// 	console.log('**********************************************************************');
// 	console.log();
// 	console.log('Opening the link in browser....');
// 	setTimeout(openLinkInBrowser.bind(null, workflow_url), 2000);
// 	// setTimeout(process.exit(0), 2000);
// }



// function PrintAllWorkflows(userDetails){

// 	var opts = {
// 		url: 'https://api.github.com/repos/'+username+'/'+repo_name+'/actions/workflows',
// 		headers: {
// 			'User-Agent': 'request',
// 			Authorization: `Bearer ${TOKEN}`
// 		}
// 	};

// 	  return new Promise(function(resolve, reject) {
// 		request(opts, function(error, response, body){
// 			resolve(JSON.parse(response['body'])['workflows']);
// 			// console.log(response['statusCode']);
// 		});
// 	  });
// }

//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************
//*******************************************************************************************************************



// function openSignInLink(){
// 	return new Promise(resolve => {
// 		opn('https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=f64517c8-4cb9-4149-b29e-4a3ee66e7133&response_type=code&redirect_uri=https://localhost:3000/callback&response_mode=query&scope=offline_access%20user.read&state=AzureShubhamLogIn');	
// 		// opn('https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=f64517c8-4cb9-4149-b29e-4a3ee66e7133&response_type=id_token+code&redirect_uri=https://localhost:3000/callback&response_mode=query&scope=offline_access%20user.read%20user_impersonation&state=AzureShubhamLogIn');	
// 		resolve();
// 	});
// }

// function getToken(){
// 	var opts = {
// 		url: 'https://localhost:3000/token'
// 	};
// 	var flag = "hello";
// 	return new Promise(function(resolve, reject) {
// 		request(opts, function(error, response, body){
// 			resolve(response);
// 		});
// 	});
// }

// async function azureLogIn(){
// 	await openSignInLink();
// 	var result;
// 	while(!result || result['body'].startsWith("<!DOCTYPE html>", 0)){
// 		result = await getToken();
// 	}
// 	return new Promise(resolve => {
// 		resolve(JSON.parse(result['body']));
// 	});
// }
